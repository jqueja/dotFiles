" Begin jqueja

syntax on
colo monokai

set number
"set cursorcolumn

" Relative numbers for yank.
" j is down, k is up
if exists('##TextYankPost')
    nnoremap y :set relativenumber<CR>y
    nnoremap d :set relativenumber<CR>d
    autocmd TextYankPost * set norelativenumber
    onoremap <Esc> <Esc>:set norelativenumber<CR>
endif

nnoremap <F5> :UndotreeToggle<CR>

filetype plugin indent on

" Default indentation is four spaces.
set shiftwidth=4
set tabstop=4
set softtabstop=4
" Expand tabs to spaces.
set expandtab smarttab
" Enable autoindenting and smartindenting...
set autoindent smartindent
" ...except with Python since it's not C-like and comments get messed up...
autocmd FileType python
               \ setlocal nosmartindent indentexpr=GetPythonIndent(v:lnum)

autocmd Filetype make setlocal noexpandtab

call plug#begin('~/.vim/plugged')

Plug 'https://github.com/vim-airline/vim-airline'
Plug 'https://github.com/mbbill/undotree'
Plug 'dense-analysis/ale'
"Plug 'https://github.com/preservim/nerdtree'

call plug#end()


" Use Bash-esque file completion.
" menu for :vs.
set wildmode=longest:full,full
set wildmenu

" for ale
" Don't check syntax until save.
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0
" disable ale for .sml (who needs help?)
autocmd FileType sml let b:ale_enabled = 0
" disable ale for .tex
autocmd FileType tex let b:ale_enabled = 0

" Underline ALE errors instead of highlighting.
hi ALEError ctermbg=NONE cterm=underline,bold guibg=NONE gui=underline,bold
" Make all warnings look like errors.
let g:ale_sign_error = '!'


" Show a guide at 80 chars.
autocmd FileType * if &ft != "tex" && &ft != "txt" && &ft != "markdown"
                 \ && &ft != "csv" | set colorcolumn+=81

" Highlight the current line.
set cursorline
" ...that's stupidly laggy. Mitigate it.
set lazyredraw

" Show partial wrapped lines at the end of the window.
set display=lastline
" Always show one line beyond the cursor.
set scrolloff=1
" ## added by OPAM user-setup for vim / base ## 93ee63e278bdfc07d1139a748ed3fff2 ## you can edit, but keep this line
let s:opam_share_dir = system("opam config var share")
let s:opam_share_dir = substitute(s:opam_share_dir, '[\r\n]*$', '', '')

let s:opam_configuration = {}

function! OpamConfOcpIndent()
  execute "set rtp^=" . s:opam_share_dir . "/ocp-indent/vim"
endfunction
let s:opam_configuration['ocp-indent'] = function('OpamConfOcpIndent')

function! OpamConfOcpIndex()
  execute "set rtp+=" . s:opam_share_dir . "/ocp-index/vim"
endfunction
let s:opam_configuration['ocp-index'] = function('OpamConfOcpIndex')

function! OpamConfMerlin()
  let l:dir = s:opam_share_dir . "/merlin/vim"
  execute "set rtp+=" . l:dir
endfunction
let s:opam_configuration['merlin'] = function('OpamConfMerlin')

let s:opam_packages = ["ocp-indent", "ocp-index", "merlin"]
let s:opam_check_cmdline = ["opam list --installed --short --safe --color=never"] + s:opam_packages
let s:opam_available_tools = split(system(join(s:opam_check_cmdline)))
for tool in s:opam_packages
  " Respect package order (merlin should be after ocp-index)
  if count(s:opam_available_tools, tool) > 0
    call s:opam_configuration[tool]()
  endif
endfor
" ## end of OPAM user-setup addition for vim / base ## keep this line
" ## added by OPAM user-setup for vim / ocp-indent ## 997b82d725f70e3b887082469ca755c5 ## you can edit, but keep this line
if count(s:opam_available_tools,"ocp-indent") == 0
  source "/Users/jqueja/.opam/default/share/ocp-indent/vim/indent/ocaml.vim"
endif
" ## end of OPAM user-setup addition for vim / ocp-indent ## keep this line
